@model Invoicing.Models.Order

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script>
    //var getEmailsUrl = "@Url.Action("CreateVM", "Order")";
</script>

<h2>Create Invoice</h2>
<br />
@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()

    <!--<h4>Create an Order</h4>-->
    <!--<hr />-->
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <!--
    <ul class="nav nav-tabs" data-tabs="tabs" style="clear:both">
        <li role="presentation" class="active"><a data-toggle="tab" href="#TabPersonal">Teacher Info</a></li>
        <li role="presentation"><a data-toggle="tab" href="#TabFinancial">Financial Department</a></li>
    </ul>

    <div id="my-tab-content" class="tab-content" style="margin-top:20px" ng-app="md" ng-controller="ctrl">
        <div id='TabPersonal' class='tab-pane active'>Html.Partial("_TabPersonal", Model)</div>
        <div id='TabFinancial' class='tab-pane'>Html.Partial("_TabFinancial", Model)</div>
    </div>
        -->
    <div class="container-fluid">

        <div class="row" style="margin-top:0px;margin-bottom:10px">
            <div class="col-xs-12">
                <span style="color:blue;font-weight:bold;">TEACHER INFO</span>
            </div>
        </div>

        <div class="row">
            <div class="col-xs-4 form-group">
                @Html.LabelFor(model => model.FirstName, "First Name", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger", @style = "display:block;" })
            </div>
            <div class="col-xs-4 form-group">
                @Html.LabelFor(model => model.LastName, "Last Name", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
            <div class="col-xs-4 form-group">
                @Html.LabelFor(model => model.OccupationTitle, "Occupation Title", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.OccupationTitle, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.OccupationTitle, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="row">
            <div class="col-xs-4 form-group">
                @Html.LabelFor(model => model.Email, "Email", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
            <div class="col-xs-4 form-group">
                @Html.LabelFor(model => model.Phone, "Phone", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
            </div>
            <div class="col-xs-4 form-group">
                @Html.LabelFor(model => model.Extension, "Extension", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.Extension, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Extension, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="row">
            <div class="col-xs-4 form-group">
                @Html.LabelFor(model => model.OrganizationType, "Organization Type", htmlAttributes: new { @class = "control-label" })
                @Html.DropDownListFor(model => model.OrganizationType, (SelectList)ViewBag.OrganizationTypeDDDW, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.OrganizationType, "", new { @class = "text-danger" })
            </div>
            <div class="col-xs-4 form-group">
                @Html.LabelFor(model => model.SchoolState, "School State", htmlAttributes: new { @class = "control-label" })
                @Html.DropDownListFor(model => model.SchoolState, (SelectList)ViewBag.StateDDDW, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.SchoolState, "", new { @class = "text-danger" })
            </div>
            <div class="col-xs-4 form-group">
                @Html.LabelFor(model => model.SchoolCity, "School City", htmlAttributes: new { @class = "control-label" })
                @Html.DropDownListFor(model => model.SchoolCity, (SelectList)ViewBag.CityDDDW, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.SchoolCity, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="row">
            <div class="col-xs-12 form-group">
                <div id="SchoolNameDDDW" style="display:none">
                    @Html.LabelFor(model => model.SchoolID, "Organization Name", htmlAttributes: new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.SchoolID, (SelectList)ViewBag.OrganizationNameDDDW, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.SchoolID, "", new { @class = "text-danger", @style = "display:none" })
                </div>
                <div id="SchoolNameText">
                    @Html.LabelFor(model => model.SchoolName, "Organization Name", htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.SchoolName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.SchoolName, "", new { @class = "text-danger", @style = "display:none" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-xs-6 form-group">
                @Html.LabelFor(model => model.ShippingAddress, "Address", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.ShippingAddress, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ShippingAddress, "", new { @class = "text-danger" })
            </div>
            <div class="col-xs-6 form-group">
                @Html.LabelFor(model => model.OfficeClassRoomLocation, "Office or Classroom Location", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.OfficeClassRoomLocation, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.OfficeClassRoomLocation, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row">
            <div class="col-xs-4 form-group">
                @Html.LabelFor(model => model.ShippingCity, "City", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.ShippingCity, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ShippingCity, "", new { @class = "text-danger" })
            </div>
            <div class="col-xs-4 form-group">
                @Html.LabelFor(model => model.ShippingState, "State", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.ShippingState, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ShippingState, "", new { @class = "text-danger" })
            </div>
            <div class="col-xs-4 form-group">
                @Html.LabelFor(model => model.ShippingZip, "Zip", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.ShippingZip, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ShippingZip, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row" style="margin-top:25px;margin-bottom:10px">
            <div class="col-xs-12">
                <span style="color:blue;font-weight:bold;">FINANCIAL DEPARTMENT</span>
            </div>
        </div>

        <div class="row" style="margin-top:15px;margin-bottom:15px">
            <div class="col-xs-12">
                <input id="ind_FD" name="ind_FD" type="checkbox" /> Copy from teacher info
            </div>
        </div>

        <div class="row">

            <div class="col-xs-4 form-group">
                @Html.LabelFor(model => model.FD_FirstName, "First Name", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.FD_FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FD_FirstName, "", new { @class = "text-danger" })
            </div>

            <div class="col-xs-4 form-group">
                @Html.LabelFor(model => model.FD_LastName, "Last Name", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.FD_LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FD_LastName, "", new { @class = "text-danger" })
            </div>
            <div class="col-xs-4 form-group">
                @Html.LabelFor(model => model.FD_OccupationTitle, "Occupation Title", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.FD_OccupationTitle, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FD_OccupationTitle, "", new { @class = "text-danger" })
            </div>

        </div>
        <div class="row">
            <div class="col-xs-4 form-group">
                @Html.LabelFor(model => model.FD_Email, "Email", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.FD_Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FD_Email, "", new { @class = "text-danger" })
            </div>

            <div class="col-xs-4 form-group">
                @Html.LabelFor(model => model.FD_Phone, "Phone", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.FD_Phone, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FD_Phone, "", new { @class = "text-danger" })
            </div>

            <div class="col-xs-4 form-group">
                @Html.LabelFor(model => model.FD_Extension, "Extension", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.FD_Extension, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FD_Extension, "", new { @class = "text-danger" })
            </div>

        </div>
        <div class="row">
            <div class="col-xs-6 form-group">
                @Html.LabelFor(model => model.FD_ShippingAddress, "Address", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.FD_ShippingAddress, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FD_ShippingAddress, "", new { @class = "text-danger" })
            </div>
            <div class="col-xs-6 form-group">
                @Html.LabelFor(model => model.FD_OfficeLocation, "Office Location", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.FD_OfficeLocation, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FD_OfficeLocation, "", new { @class = "text-danger" })
            </div>

        </div>

        <div class="row">
            <div class="col-xs-4 form-group">
                @Html.LabelFor(model => model.FD_ShippingCity, "City", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.FD_ShippingCity, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FD_ShippingCity, "", new { @class = "text-danger" })
            </div>

            <div class="col-xs-4 form-group">
                @Html.LabelFor(model => model.FD_ShippingState, "State", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.FD_ShippingState, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FD_ShippingState, "", new { @class = "text-danger" })
            </div>

            <div class="col-xs-4 form-group">
                @Html.LabelFor(model => model.FD_ShippingZip, "Zip", htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.FD_ShippingZip, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FD_ShippingZip, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="row" style="margin-top:25px;margin-bottom:10px">
            <div class="col-xs-12">
                <span style="color:blue;font-weight:bold;">PRODUCT DETAILS</span>
            </div>
        </div>

        <div class="row">
            <div class="col-xs-12">
                <table id="ProductDetails" class="table table-condensed table-bordered">
                    <thead>
                    <th style="width:40%">Description</th>
                    <th style="width:20%">Quantity</th>
                    <th style="width:20%">Unit Price</th>
                    <th style="width:20%">Total</th>
                    </thead>
                    <tbody>
                        @for (var i = 0; i < Model.OrderDetails.Count(); i++)
                        {
                            <tr id="rr">
                                <td>
                                    @Html.HiddenFor(model => model.OrderDetails.ToList()[i].ZohoIdProduct, new { @Name = String.Format("OrderDetails[{0}].ZohoIdProduct", i) })
                                    @Html.HiddenFor(model => model.OrderDetails.ToList()[i].Item, new { @Name = String.Format("OrderDetails[{0}].Item", i) })
                                    @Html.EditorFor(model => model.OrderDetails.ToList()[i].Name, new { htmlAttributes = new { @style = "border:0;background-color:white", @readonly = "readonly", @class = "form-control text-left", @Name = String.Format("OrderDetails[{0}].Name", i) } })
                                </td>
                                <td>
                                    @Html.EditorFor(model => model.OrderDetails.ToList()[i].Qty, new { htmlAttributes = new { @class = "form-control", @Name = String.Format("OrderDetails[{0}].Qty", i) } })
                                    @Html.ValidationMessageFor(model => model.OrderDetails.ToList()[i].Qty, "", new { @class = "text-danger", data_valmsg_for = String.Format("OrderDetails[{0}].Qty", i) })
                                </td>
                                <td class="text-right">
                                    @Html.EditorFor(model => model.OrderDetails.ToList()[i].Price, new { htmlAttributes = new { @style = "border:0;background-color:white", @readonly = "readonly", @class = "form-control text-right", @Name = String.Format("OrderDetails[{0}].Price", i) } })
                                </td>
                                <td class="text-right">
                                    @Html.EditorFor(model => model.OrderDetails.ToList()[i].Total, new { htmlAttributes = new { @style = "border:0;background-color:white", @readonly = "readonly", @class = "form-control text-right", @Name = String.Format("OrderDetails[{0}].Total", i) } })
                                </td>
                            </tr>
                        }

                    </tbody>
                </table>

            </div>
        </div>

        <div class="row">
            <div class="col-xs-12">
                <table style="width:100%">
                    <tbody>
                        <tr>
                            <td style="width:80%;" class="text-right">SubTotal $&nbsp;</td>
                            <td style="width:20%;" class="text-right">
                                @Html.EditorFor(model => model.SubTotal, new { htmlAttributes = new { @class = "form-control text-right", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.SubTotal, "", new { @class = "text-danger" })
                            </td>
                        </tr>
                        <tr>
                            <td class="text-right">Shipping Charges $&nbsp;</td>
                            <td class="text-right">
                                @Html.EditorFor(model => model.ShippingCharges, new { htmlAttributes = new { @class = "form-control text-right", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.ShippingCharges, "", new { @class = "text-danger" })
                            </td>
                        </tr>
                        <tr>
                            <td class="text-right"><span id="TaxPercent" style="color:blue;">&nbsp;</span>Tax $&nbsp;</td>
                            <td class="text-right">
                                @Html.HiddenFor(model => model.TaxPercentage)
                                @Html.EditorFor(model => model.Tax, new { htmlAttributes = new { @class = "form-control text-right", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.Tax, "", new { @class = "text-danger" })
                            </td>
                        </tr>
                        <tr>
                            <td class="text-right">Total $&nbsp;</td>
                            <td class="text-right">
                                @Html.EditorFor(model => model.Total, new { htmlAttributes = new { @class = "form-control text-right", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.Total, "", new { @class = "text-danger" })
                            </td>
                        </tr>

                    </tbody>
                </table>


            </div>

        </div>

        <div class="row">
            <div class="col-xs-12 form-group">
                @Html.LabelFor(model => model.PaymentMethod, "Payment Method", htmlAttributes: new { @class = "contro-label" }) <br />
                @Html.RadioButtonFor(model => model.PaymentMethod, "P", new { htmlAttributes = new { @class = "form-control" } }) Will send Purchase Order<br />
                @Html.RadioButtonFor(model => model.PaymentMethod, "C", new { htmlAttributes = new { @class = "form-control" } }) Purchase with credit card Today
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-xs-12 form-group">
                @Html.CheckBoxFor(model => model.AcceptTC, new { htmlAttributes = new { @class = "form-control" } })<span>&nbsp;&nbsp;Accept the <a href="http://www.roboterra.com/terms/" target="_blank">Terms and Conditions</a></span><br />
                @Html.ValidationMessageFor(model => model.AcceptTC, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="row">
            <div class="col-xs-12">
                <br>
                <input type="submit" value="Create" class="btn btn-primary " />
            </div>
        </div>



    </div>

}

            @section scripts {
                <script>

                    $(document).on('submit', 'form', function () {
                        //alert("submitted");
                        $("#fakeLoader").fakeLoader({
                            timeToHide: 90000, //Time in milliseconds for fakeLoader disappear
                            spinner: "spinner6",//Options: 'spinner1', 'spinner2', 'spinner3', 'spinner4', 'spinner5', 'spinner6', 'spinner7' 
                        });
                        return true;
                    });


                    function TwoDec(el) {
                        el.value = parseFloat(el.value).toFixed(2);
                    }

                    $(document).ready(function () {

                        /*
                        $("#fakeLoader").fakeLoader({
                            timeToHide: 190000, //Time in milliseconds for fakeLoader disappear
                            spinner: "spinner6",//Options: 'spinner1', 'spinner2', 'spinner3', 'spinner4', 'spinner5', 'spinner6', 'spinner7' 
                        });
                        */

                        $("#OrganizationType").change(function () {
                            otype = $(this).val();

                            if ($(this).val() == "Other") {
                                $("div[id='SchoolNameText']").css("display", "");
                                $("div[id='SchoolNameDDDW']").css("display", "none");
                            }
                            else {
                                $("div[id='SchoolNameText']").css("display", "none");
                                $("div[id='SchoolNameDDDW']").css("display", "");
                            }

                            param = { type: otype };
                            $.ajax({
                                url: "@Url.Action("_GetStates", "Order")", data: param, cache: false, async: false,
                                success: function (data) {
                                    $("#SchoolState").html(data);
                                    $("#SchoolState").trigger('change');
                                    $("#SchoolCity").trigger('change');
                                },
                                error: function (obj, textStatus, errorThrown) { alert("Error getting list of States: " + errorThrown); }
                            });

                        });

                        $("#SchoolState").change(function () {
                            otype = $("#OrganizationType").val();
                            ostate = $("#SchoolState").val();
                            ocity = $("#SchoolCity").val();

                            if (otype == null || otype == "") { return };
                            if (ostate == null || ostate == "") { return };
                            if (ocity == null || ocity == "") { return };

                            param = { type: otype, state: ostate };
                            $.ajax({
                                url: "@Url.Action("_GetCities", "Order")", data: param, cache: false, async: false,
                                success: function (data) {
                                    $("#SchoolCity").html(data);
                                    $("#SchoolCity").trigger('change');
                                },
                                error: function (obj, textStatus, errorThrown) { alert("Error getting list of cities: " + errorThrown); }
                            });

                            // For recalculating the Tax
                            Totales()
                        });

                        $("#SchoolCity").change(function () {
                            otype = $("#OrganizationType").val();
                            ostate = $("#SchoolState").val();
                            ocity = $("#SchoolCity").val();

                            if (otype == null || otype == "") { return };
                            if (ostate == null || ostate == "") { return };
                            if (ocity == null || ocity == "") { return };

                            param = { type: otype, state: ostate, city: ocity };
                            $.ajax({
                                url: "@Url.Action("_GetSchools", "Order")", data: param, cache: false, async: false,
                                success: function (data) {
                                    $("select[name='SchoolID']").html(data);
                                },
                                error: function (obj, textStatus, errorThrown) { alert("Error getting list of Schools: " + errorThrown); }
                            });

                        });

                        $("#SchoolID").change(function () {
                            oID = $(this).val();
                            param = { ID: oID };
                            $.ajax({
                                url: "@Url.Action("_GetSchoolInfo", "Order")", data: param, cache: false, async: false,
                                success: function (data) {

                                    $("#ShippingAddress").val(data.LocationAddress);
                                    $("#ShippingCity").val(data.LocationCity);
                                    $("#ShippingState").val(data.LocationState);
                                    $("#ShippingZip").val(data.LocationZip);

                                    $("#SchoolName").val(data.SchooName);
                                },
                                error: function (obj, textStatus, errorThrown) { alert("Error getting School information: " + errorThrown); }
                            });

                        });

                        $('#ind_FD').change(function () {
                            if ($(this).is(":checked")) {
                                $("#FD_FirstName").val($("#FirstName").val());
                                $("#FD_LastName").val($("#LastName").val());
                                $("#FD_Email").val($("#Email").val());
                                $("#FD_Phone").val($("#Phone").val());
                                $("#FD_Mobile").val($("#Mobile").val());
                                $("#FD_ShippingAddress").val($("#ShippingAddress").val());
                                $("#FD_ShippingCountry").val($("#ShippingCountry").val());
                                $("#FD_ShippingCity").val($("#ShippingCity").val());
                                $("#FD_ShippingState").val($("#ShippingState").val());
                                $("#FD_ShippingZip").val($("#ShippingZip").val());
                            }
                        });

                        $("input[name$='ShippingCharges']").on('input', function (e) {
                            Totales();
                        });

                        $("input[name$='Tax']").on('input', function (e) {
                            Totales();
                        });


                        $("input[name$='Qty']").on('input', function (e) {

                            trObject = $(e.target).closest("tr");
                            priceObject = trObject.find("input[name$='Price']");
                            totalObject = trObject.find("input[name$='Total']");

                            qty = e.target.value;
                            if (!(qty >= 0)) {
                                qty = 0;
                            }

                            total = ($(priceObject).val() * qty).toFixed(2);
                            $(totalObject).val(total);
                            Totales();
                        });


                        function Totales() {

                            var subtotal = 0;
                            var shipping = 0;
                            var taxPercent = 0;
                            var tax = 0;
                            var total = 0;
                            var totalqty = 0;
                            var state = $("#SchoolState").val();

                            $('#ProductDetails > tbody  > tr').each(function () {
                                totalObject = $(this).find("input[name$='Total']");
                                qtyObject = $(this).find("input[name$='Qty']");
                                total = $(totalObject).val();
                                qty = $(qtyObject).val();
                                if (!($.isNumeric(qty))) { qty = 0; }
                                totalqty = parseInt(totalqty) + parseInt(qty);
                                subtotal = parseFloat(subtotal) + parseFloat(total);
                            });

                            subtotal = (subtotal + 0.00).toFixed(2);

                            $.ajax({
                                url: "@Url.Action("_GetShippingRate", "Order")", data: { quantity: totalqty }, cache: false, async: false,
                                success: function (data) {
                                    shipping = parseFloat(data).toFixed(2);
                                },
                                error: function (obj, textStatus, errorThrown) { alert("Error getting Shipping Rate: " + errorThrown); }
                            });

                            subtotalshipping = parseFloat(subtotal) + parseFloat(shipping);

                            $.ajax({
                                url: "@Url.Action("_GetTax", "Order")", data: { state: state, amount: subtotalshipping }, cache: false, async: false,
                                success: function (data) {
                                    taxPercent = parseFloat(data.taxPercent).toFixed(3);
                                    tax = parseFloat(data.tax).toFixed(2);
                                    //alert(taxPercent);
                                },
                                error: function (obj, textStatus, errorThrown) { alert("Error getting Tax: " + errorThrown); }
                            });

                            total = (parseFloat(subtotal) + parseFloat(shipping) + parseFloat(tax)).toFixed(2);

                            $("#SubTotal").val(subtotal);
                            $("#ShippingCharges").val(shipping);
                            if (taxPercent > 0) {
                                $("#TaxPercent").html("(" + taxPercent.toString() + "%)&nbsp;");
                            }
                            else {
                                $("#TaxPercent").html("");
                            }
                            $("#TaxPercentage").val(taxPercent);
                            $("#Tax").val(tax);
                            $("#Total").val(total);
                        }


                    });


                </script>
            }


